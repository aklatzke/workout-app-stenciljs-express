{"version":3,"sources":["../../src/routes/workouts.js"],"names":["r","db","get","req","res","workouts","find","uid","ObjectId","query","json","params","exercises","exerciseRecords","exerciseReference","forEach","obj","_id","workoutCount","exerciseCount","workout","name","item","idx","exerciseId","exerciseFavorites","Object","keys","map","key","count","sort","a","b","slice","reduce","carry","next","favWorkouts","favExercises","message","exerciseMap","groupedExercises","end","exercise","push","toString","filter","includes","final","$elemMatch","eid","exerciseRecord","findOne","targetExcercises","data","proper","date","arr","totals","reps","weight","set","parseInt","avgRep","Math","floor","rawArray","workoutResponse","record","post","body","template","insert","timestamp","isActive","activeWorkout","groups","muscleGroup","object","set_order","weight_unit","distance","distance_unit","seconds","notes","id","val","update","$push","result","wId"],"mappings":"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","file":"workouts.js","sourcesContent":["export default (r, db) => {\n  r.get(\"/user/workouts\", async (req, res) => {\n    let workouts = await db.workouts.find({\n      uid: db.ObjectId(req.query.uid)\n    });\n\n    if (workouts)\n      return res.json(workouts);\n\n    return res.json(null);\n  })\n\n  r.get(\"/user/:uid/workouts/overview\", async (req, res) => {\n    let workouts = await db.workouts.find({\n      uid: db.ObjectId(req.params.uid)\n    });\n\n    let exercises = {}\n    let exerciseRecords = await db.exerciseReference.find({})\n    \n    exerciseRecords.forEach(obj => {\n        exercises[obj._id] = obj\n    });\n\n    if (workouts) {\n      let workoutCount = {};\n      let exerciseCount = {};\n      workouts.forEach(workout => {\n        if (workout.name === \"undefined\") return;\n\n        if (!workoutCount[workout.name]) {\n          workoutCount[workout.name] = 0;\n        }\n\n        workoutCount[workout.name]++;\n\n        if (workout.exercises) {\n            workout.exercises.forEach((item, idx) => {\n                if(! item.exerciseId ) return;\n\n                if (!exerciseCount[item.exerciseId]) {\n                    exerciseCount[item.exerciseId] = 0;\n                }\n\n                exerciseCount[item.exerciseId]++;\n            })\n        }\n      })\n\n      let exerciseFavorites = Object.keys(exerciseCount).map(key => ({\n        name: key,\n        count: exerciseCount[key]\n      }))\n\n      exerciseFavorites = exerciseFavorites\n                            .sort((a, b) => {\n                                if (a.count > b.count)\n                                return -1;\n                                if (a.count === b.count)\n                                return 0;\n                                if (a.count < b.count)\n                                return 1;\n                            })\n                            .slice(0, 5)\n                            .map( item => {\n                                item.name = exercises[item.name].name;\n\n                                return item;\n                            })\n                            .reduce((carry, next) => {\n                                carry[next.name] = next.count;\n                                return carry;\n                            }, {});\n\n      res.json({\n        favWorkouts: workoutCount,\n        favExercises: exerciseFavorites\n      });\n    } else {\n      return res.json({\n        message: \"No workouts yet. Get Started\"\n      });\n    }\n  })\n\n  r.get(\"/user/exercises/all/\", async (req, res) => {\n    let workouts = await db.workouts.find({\n      uid: db.ObjectId(req.query.uid)\n    });\n\n    let exerciseMap = {};\n    let exercises = await db.exerciseReference.find({});\n\n    exercises.forEach( obj => exerciseMap[obj._id] = obj );\n\n    let groupedExercises = [];\n\n    if (!workouts) res.end(\"404\")\n\n    workouts.forEach(workout => workout.exercises ? workout.exercises.forEach(exercise => {\n      if (exercise.exerciseId) {\n        groupedExercises.push(exercise.exerciseId.toString())\n      } else {\n        return;\n      }\n    }) : null)\n\n    Object.keys(exerciseMap).filter( key => {\n        if(! groupedExercises.includes(key) )\n            delete exerciseMap[key];\n    } )\n\n    let final = Object.keys(exerciseMap).map(key => exerciseMap[key]);\n\n    res.json(final);\n  })\n\n  r.get(\"/user/:uid/excercise/:eid/detail\", async (req, res) => {\n    let workouts = await db.workouts.find({\n      uid: db.ObjectId(req.params.uid),\n      exercises: { $elemMatch: { exerciseId: db.ObjectId(req.params.eid) } }\n    });\n\n    let exerciseRecord = await db.exerciseReference.findOne({ _id : db.ObjectId(req.params.eid) });\n\n    let targetExcercises = {\n      data: {\n\n      },\n      proper: exerciseRecord.name\n    };\n\n    workouts.forEach(workout => workout.exercises.forEach(exercise => {\n      if (exercise.exerciseId) {\n        if (exercise.exerciseId.toString() === req.params.eid.toString()) {\n          if (!targetExcercises.data[workout.date]) {\n            targetExcercises.data[workout.date] = [];\n          }\n\n          targetExcercises.data[workout.date].push({\n            date: workout.date,\n            ...exercise\n          });\n        }\n      }\n    }))\n\n    for (let key in targetExcercises.data) {\n      let arr = targetExcercises.data[key];\n      let totals = {\n        reps: 0,\n        weight: 0\n      }\n\n      arr.forEach(set => {\n        totals.reps += parseInt(set.reps);\n        totals.weight += parseInt(set.weight) * parseInt(set.reps);\n      })\n\n      totals.avgRep = Math.floor(totals.weight / totals.reps);\n\n      targetExcercises.data[key] = totals;\n    }\n\n    targetExcercises.rawArray = Object.keys(targetExcercises.data).map(key => targetExcercises.data[key]);\n\n    res.json(targetExcercises);\n  })\n\n  r.get(\"/user/:uid/workouts/list\", async(req, res) => {\n    let workouts = await db.workouts.find({\n      uid: db.ObjectId(req.params.uid)\n    });\n\n    let workoutResponse = workouts.map( record => ({\n      _id: record._id,\n      name: record.name\n    }) )\n\n    res.json(workoutResponse);\n  })\n\n  r.post(\"/user/:uid/workout/new\", async(req, res) => {\n\n    if( req.body.template ){\n\n    }\n    else{\n      let insert = await db.workouts.insert({ \n        name: req.body.name,\n        date: req.body.timestamp,\n        uid: req.params.uid,\n        isActive: true\n      })\n\n      res.json(insert);\n    }\n  })\n\n  r.get(\"/user/:uid/workout/active\", async(req,res) => {\n    let activeWorkout = await db.workouts.findOne({\n      uid: req.params.uid,\n      isActive: true\n    })\n\n    res.json(activeWorkout);\n  })\n\n  r.get(\"/exercises/list\", async(req, res) => {\n    let exercises = await db.exerciseReference.find({});\n    let groups = {};\n\n    exercises.forEach(record => {\n      if( ! groups[record.muscleGroup] )\n        groups[record.muscleGroup] = [];\n\n      groups[record.muscleGroup].push(record);\n    })\n\n    return res.json(groups);\n  })\n\n  r.get(\"/workout/:id/add/:eid\", async(req, res) => {\n    let object = {\n      exerciseId: req.params.eid,\n      set_order: 1,\n      weight: 0,\n      weight_unit: \"lbs\",\n      reps: 0,\n      distance: null,\n      distance_unit: null,\n      seconds: 0,\n      notes: \"\"\n    };\n\n    let record = await db.workouts.find({\n          _id: db.ObjectId(req.params.id)\n        })\n\n    let val = await db.workouts.update({\n      _id: db.ObjectId(req.params.id)\n    }, {\n      $push : {\n        exercises: object\n      }\n    })\n\n    res.json(val);\n  })\n\n  r.post(\"/workout/:wId/finish\", async(req, res) => {\n    let result = await db.workouts.update({\n      _id: db.ObjectId(req.params.wId)\n    }, {\n      isActive: false\n    });\n\n    res.json(result);\n  })\n}\n"]}