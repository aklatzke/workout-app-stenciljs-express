{"version":3,"sources":["../../src/routes/etc.js"],"names":["nameHash","r","db","get","req","res","data","readFile","__dirname","rows","toString","split","map","row","cell","replace","headers","shift","workouts","uniqueExcercises","trim","filter","name","index","arr","indexOf","temp","forEach","idx","toLowerCase","workout_name","date","push","remove","exercises","user","users","findOne","email","exerciseRecords","exerciseReference","find","key","workout","ex","exercise_name","exerciseKey","record","exerciseId","_id","workout_notes","item","timestamp","unix","result","insert","uid","notes","json","muscleGroup","delete","records"],"mappings":"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","file":"etc.js","sourcesContent":["import fs from 'fs-extra';\nimport moment from 'moment';\n\nlet nameHash = {\n    \"Squat\": \"barbell full squat\",\n    \"Calf Raise (With Decline)\": \"smith machine calf raise\",\n    \"Goblet Squat\": \"goblet squat\",\n    \"Leg Curl\": \"seated leg curl\",\n    \"Leg Extension\": \"leg extensions\",\n    \"Bench Press (Dumbbell)\": \"dumbbell bench press\",\n    \"Close Grip Bench Press\": \"smith machine close-grip bench press\",\n    \"Incline Press (Machine)\": \"smith machine incline bench press\",\n    \"Bent Over Cable Fly\": \"incline cable flye\",\n    \"Tricep Kickback\": \"tricep dumbbell kickback\",\n    \"Bench Dips\": \"weighted bench dip\",\n    \"Lateral Raise\": \"side lateral raise\",\n    \"Upright Barbell Row\": \"upright barbell row\",\n    \"Shoulder Press (Machine)\": \"cable shoulder press\",\n    \"Shoulder Butterfly\": \"reverse flyes with external rotation\",\n    \"Lat Pulldown\": \"wide-grip lat pulldown\",\n    \"Bent Over Row\": \"bent over barbell row\",\n    \"Reverse Grip Barbell Row\": \"reverse grip bent-over rows\",\n    \"Bent Over Row (Dumbbell)\": \"bent over two-dumbbell row\",\n    \"Crunch\": \"crunches\",\n    \"Russian Twist\": \"russian twist\",\n    \"Front Raise\": \"front plate raise\",\n    \"Tricep Pull-down\": \"low cable triceps extension\",\n    \"Side Bend (decline)\": \"dumbbell side bend\",\n    \"Reverse Fly\": \"reverse flyes\",\n    \"Back Extensions\": \"hyperextensions (back extensions)\",\n    \"Seated Row\": \"rowing\",\n    \"Lunge (Dumbbell)\": \"dumbbell lunges\",\n    \"Bench Press\": \"smith machine bench press\",\n    \"Standing Calf Raise\": \"smith machine calf raise\",\n    \"Shrug\": \"smith machine shrug\",\n};\n\nexport default (r, db) => {\n    r.get('/seed/data', async (req, res) => {\n        let data = await fs.readFile(__dirname + \"/../../resources/workouts.csv\");\n        let rows = data.toString().split(\"\\n\");\n\n        rows = rows.map(row => row.split(\";\").map(cell => cell.replace('\\\"', \"\").replace('\\\"', \"\")));\n\n        let headers = rows[0];\n\n        rows.shift();\n\n        let workouts = {};\n\n        let uniqueExcercises = rows\n                                .map( row => row[2] ? row[2].trim() : null )\n                                .filter( ( name, index, arr ) => name && arr.indexOf(name) === index );\n\n        rows = rows.map(row => {\n            let temp = {};\n            headers.forEach((data, idx) => temp[data.toLowerCase().replace(/ /g, \"_\")] = row[idx]);\n            return temp;\n        })\n\n        rows.forEach(row => {\n            if (!workouts[row.workout_name + \"|\" + row.date]) {\n            workouts[row.workout_name + \"|\" + row.date] = [];\n            }\n\n            workouts[row.workout_name + \"|\" + row.date].push(row);\n        })\n\n        await db.workouts.remove({});\n        await db.exercises.remove({})\n\n        let user = await db.users.findOne({\n            email: \"andrewklatzke@gmail.com\"\n        });\n\n        let exerciseRecords = await db.exerciseReference.find({});\n\n        for (let key in workouts) {\n            let workout = workouts[key];\n\n            if (workout.name === \"undefined\") continue;\n\n            let exercises = workout.map( (ex, idx) => {\n                if (ex.exercise_name && nameHash[ex.exercise_name.trim()]) {\n                    let exerciseKey = exerciseRecords.find(record => record.name === nameHash[ex.exercise_name.trim()]);\n                    if (exerciseKey) {\n                        ex.exerciseId = exerciseKey._id;\n                        delete ex.exercise_name;\n                        delete ex.workout_name;\n                        delete ex.date;\n                        delete ex.workout_notes;\n                    }\n\n                    return ex;\n                }\n                else{\n                    workout[idx] = null;\n                }\n            } )\n\n            exercises = exercises.filter( item => item ? true : false );\n\n            let timestamp = moment(key.split(\"|\")[1], \"YYYY-MM-DD h-mmm-ss\").unix();\n            let result = await db.workouts.insert({\n                name: key.split(\"|\")[0],\n                date: timestamp,\n                uid: user._id,\n                notes: \"\",\n                exercises: exercises\n            })\n        }\n\n        res.json(true);\n    })\n\n    r.get(\"/seed/exercises\", async (req, res) => {\n        let data = await fs.readFile(__dirname + \"/../../resources/exercises.csv\");\n        let rows = data.toString().split(\"\\n\");\n\n        rows = rows.map( row => row.split(\",\") ).map(arr => ({\n            name: arr[0].trim(),\n            muscleGroup: arr[1].trim()\n        }));\n\n        await db.exerciseReference.delete({});\n\n        let records = await db.exerciseReference.insert(rows);\n\n        res.json(records);\n    })\n}"]}