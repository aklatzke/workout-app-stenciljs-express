/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';

import {
  WorkoutType,
} from './interfaces/WorkoutType';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';
import {
  ExerciseType,
} from './interfaces/ExerciseType';

declare global {

  namespace StencilComponents {
    interface ActiveWorkoutBar {
      'activeWorkout': WorkoutType;
    }
  }

  interface HTMLActiveWorkoutBarElement extends StencilComponents.ActiveWorkoutBar, HTMLStencilElement {}

  var HTMLActiveWorkoutBarElement: {
    prototype: HTMLActiveWorkoutBarElement;
    new (): HTMLActiveWorkoutBarElement;
  };
  interface HTMLElementTagNameMap {
    'active-workout-bar': HTMLActiveWorkoutBarElement;
  }
  interface ElementTagNameMap {
    'active-workout-bar': HTMLActiveWorkoutBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'active-workout-bar': JSXElements.ActiveWorkoutBarAttributes;
    }
  }
  namespace JSXElements {
    export interface ActiveWorkoutBarAttributes extends HTMLAttributes {
      'activeWorkout'?: WorkoutType;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ActiveWorkout {
      'history': RouterHistory;
      'uid': string;
    }
  }

  interface HTMLActiveWorkoutElement extends StencilComponents.ActiveWorkout, HTMLStencilElement {}

  var HTMLActiveWorkoutElement: {
    prototype: HTMLActiveWorkoutElement;
    new (): HTMLActiveWorkoutElement;
  };
  interface HTMLElementTagNameMap {
    'active-workout': HTMLActiveWorkoutElement;
  }
  interface ElementTagNameMap {
    'active-workout': HTMLActiveWorkoutElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'active-workout': JSXElements.ActiveWorkoutAttributes;
    }
  }
  namespace JSXElements {
    export interface ActiveWorkoutAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
      'onActiveWorkoutChange'?: (event: CustomEvent) => void;
      'onChangeBack'?: (event: CustomEvent) => void;
      'onSetContextMenu'?: (event: CustomEvent) => void;
      'uid'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AddExercise {
      'activeExercises': [string];
      'activeWorkout': string;
    }
  }

  interface HTMLAddExerciseElement extends StencilComponents.AddExercise, HTMLStencilElement {}

  var HTMLAddExerciseElement: {
    prototype: HTMLAddExerciseElement;
    new (): HTMLAddExerciseElement;
  };
  interface HTMLElementTagNameMap {
    'add-exercise': HTMLAddExerciseElement;
  }
  interface ElementTagNameMap {
    'add-exercise': HTMLAddExerciseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'add-exercise': JSXElements.AddExerciseAttributes;
    }
  }
  namespace JSXElements {
    export interface AddExerciseAttributes extends HTMLAttributes {
      'activeExercises'?: [string];
      'activeWorkout'?: string;
      'onChangeBack'?: (event: CustomEvent) => void;
      'onSetContextMenu'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppAuthentication {

    }
  }

  interface HTMLAppAuthenticationElement extends StencilComponents.AppAuthentication, HTMLStencilElement {}

  var HTMLAppAuthenticationElement: {
    prototype: HTMLAppAuthenticationElement;
    new (): HTMLAppAuthenticationElement;
  };
  interface HTMLElementTagNameMap {
    'app-authentication': HTMLAppAuthenticationElement;
  }
  interface ElementTagNameMap {
    'app-authentication': HTMLAppAuthenticationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-authentication': JSXElements.AppAuthenticationAttributes;
    }
  }
  namespace JSXElements {
    export interface AppAuthenticationAttributes extends HTMLAttributes {
      'onAuthenticationResponse'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppHome {
      'uid': string;
    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      'uid'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppProfile {
      'match': MatchResults;
    }
  }

  interface HTMLAppProfileElement extends StencilComponents.AppProfile, HTMLStencilElement {}

  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    'app-profile': HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-profile': JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppRoot {

    }
  }

  interface HTMLAppRootElement extends StencilComponents.AppRoot, HTMLStencilElement {}

  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-root': JSXElements.AppRootAttributes;
    }
  }
  namespace JSXElements {
    export interface AppRootAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DisplayWorkouts {
      'uid': string;
    }
  }

  interface HTMLDisplayWorkoutsElement extends StencilComponents.DisplayWorkouts, HTMLStencilElement {}

  var HTMLDisplayWorkoutsElement: {
    prototype: HTMLDisplayWorkoutsElement;
    new (): HTMLDisplayWorkoutsElement;
  };
  interface HTMLElementTagNameMap {
    'display-workouts': HTMLDisplayWorkoutsElement;
  }
  interface ElementTagNameMap {
    'display-workouts': HTMLDisplayWorkoutsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'display-workouts': JSXElements.DisplayWorkoutsAttributes;
    }
  }
  namespace JSXElements {
    export interface DisplayWorkoutsAttributes extends HTMLAttributes {
      'uid'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ExerciseGroup {
      'activeWorkout': string;
      'existing': any;
      'records': [ExerciseType];
      'title': string;
    }
  }

  interface HTMLExerciseGroupElement extends StencilComponents.ExerciseGroup, HTMLStencilElement {}

  var HTMLExerciseGroupElement: {
    prototype: HTMLExerciseGroupElement;
    new (): HTMLExerciseGroupElement;
  };
  interface HTMLElementTagNameMap {
    'exercise-group': HTMLExerciseGroupElement;
  }
  interface ElementTagNameMap {
    'exercise-group': HTMLExerciseGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'exercise-group': JSXElements.ExerciseGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface ExerciseGroupAttributes extends HTMLAttributes {
      'activeWorkout'?: string;
      'existing'?: any;
      'records'?: [ExerciseType];
      'title'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ExerciseSingle {
      'data': any;
    }
  }

  interface HTMLExerciseSingleElement extends StencilComponents.ExerciseSingle, HTMLStencilElement {}

  var HTMLExerciseSingleElement: {
    prototype: HTMLExerciseSingleElement;
    new (): HTMLExerciseSingleElement;
  };
  interface HTMLElementTagNameMap {
    'exercise-single': HTMLExerciseSingleElement;
  }
  interface ElementTagNameMap {
    'exercise-single': HTMLExerciseSingleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'exercise-single': JSXElements.ExerciseSingleAttributes;
    }
  }
  namespace JSXElements {
    export interface ExerciseSingleAttributes extends HTMLAttributes {
      'data'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ExerciseSpecific {
      'match': MatchResults;
      'uid': string;
    }
  }

  interface HTMLExerciseSpecificElement extends StencilComponents.ExerciseSpecific, HTMLStencilElement {}

  var HTMLExerciseSpecificElement: {
    prototype: HTMLExerciseSpecificElement;
    new (): HTMLExerciseSpecificElement;
  };
  interface HTMLElementTagNameMap {
    'exercise-specific': HTMLExerciseSpecificElement;
  }
  interface ElementTagNameMap {
    'exercise-specific': HTMLExerciseSpecificElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'exercise-specific': JSXElements.ExerciseSpecificAttributes;
    }
  }
  namespace JSXElements {
    export interface ExerciseSpecificAttributes extends HTMLAttributes {
      'match'?: MatchResults;
      'onChangeBack'?: (event: CustomEvent) => void;
      'uid'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface NewWorkout {
      'history': RouterHistory;
      'uid': string;
    }
  }

  interface HTMLNewWorkoutElement extends StencilComponents.NewWorkout, HTMLStencilElement {}

  var HTMLNewWorkoutElement: {
    prototype: HTMLNewWorkoutElement;
    new (): HTMLNewWorkoutElement;
  };
  interface HTMLElementTagNameMap {
    'new-workout': HTMLNewWorkoutElement;
  }
  interface ElementTagNameMap {
    'new-workout': HTMLNewWorkoutElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'new-workout': JSXElements.NewWorkoutAttributes;
    }
  }
  namespace JSXElements {
    export interface NewWorkoutAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
      'onActiveWorkoutChange'?: (event: CustomEvent) => void;
      'onChangeBack'?: (event: CustomEvent) => void;
      'uid'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkoutList {
      'uid': string;
    }
  }

  interface HTMLWorkoutListElement extends StencilComponents.WorkoutList, HTMLStencilElement {}

  var HTMLWorkoutListElement: {
    prototype: HTMLWorkoutListElement;
    new (): HTMLWorkoutListElement;
  };
  interface HTMLElementTagNameMap {
    'workout-list': HTMLWorkoutListElement;
  }
  interface ElementTagNameMap {
    'workout-list': HTMLWorkoutListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workout-list': JSXElements.WorkoutListAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkoutListAttributes extends HTMLAttributes {
      'uid'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkoutsDashboard {
      'hasActiveWorkout': boolean;
      'uid': string;
    }
  }

  interface HTMLWorkoutsDashboardElement extends StencilComponents.WorkoutsDashboard, HTMLStencilElement {}

  var HTMLWorkoutsDashboardElement: {
    prototype: HTMLWorkoutsDashboardElement;
    new (): HTMLWorkoutsDashboardElement;
  };
  interface HTMLElementTagNameMap {
    'workouts-dashboard': HTMLWorkoutsDashboardElement;
  }
  interface ElementTagNameMap {
    'workouts-dashboard': HTMLWorkoutsDashboardElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workouts-dashboard': JSXElements.WorkoutsDashboardAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkoutsDashboardAttributes extends HTMLAttributes {
      'hasActiveWorkout'?: boolean;
      'onChangeBack'?: (event: CustomEvent) => void;
      'onSetContextMenu'?: (event: CustomEvent) => void;
      'uid'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
